//=============================================================================
// Auto-generated SGDC file for CDC analysis of module: spi_clk_sel
// Generated by auto_sgdc_gen.py
// 注意: 请根据实际设计需求验证和修改以下约束
//=============================================================================

//-----------------------------------------------------------------------------
// 时钟定义 (Clock Definitions)
//-----------------------------------------------------------------------------
create_clock -name dft_scan_clk -period 10.0 [get_ports dft_scan_clk]
create_clock -name spi_clk -period 10.0 [get_ports spi_clk]

//-----------------------------------------------------------------------------
// 时钟不确定性 (Clock Uncertainty)
//-----------------------------------------------------------------------------
set_clock_uncertainty 0.5 [get_clocks dft_scan_clk]
set_clock_uncertainty 0.5 [get_clocks spi_clk]

//-----------------------------------------------------------------------------
// 时钟组约束 (Clock Group Constraints)
//-----------------------------------------------------------------------------
set_clock_groups -asynchronous -group {dft_scan_clk} -group {spi_clk}

//-----------------------------------------------------------------------------
// CDC信号约束 (CDC Signal Constraints) - 请手动添加
//-----------------------------------------------------------------------------
# CDC从 dft_scan_clk 到 spi_clk:
# set_cdc_signal -src_clock dft_scan_clk -dst_clock spi_clk [get_nets <net_name>]
# set_cdc_property -type async -from dft_scan_clk -to spi_clk

# CDC从 spi_clk 到 dft_scan_clk:
# set_cdc_signal -src_clock spi_clk -dst_clock dft_scan_clk [get_nets <net_name>]
# set_cdc_property -type async -from spi_clk -to dft_scan_clk

//-----------------------------------------------------------------------------
// 虚假路径排除 (False Path Exceptions)
//-----------------------------------------------------------------------------
# 如果dft_scan_clk和spi_clk之间的路径不需要时序分析，可以设置为false path
set_false_path -from [get_clocks dft_scan_clk] -to [get_clocks spi_clk]
set_false_path -from [get_clocks spi_clk] -to [get_clocks dft_scan_clk]

//-----------------------------------------------------------------------------
// 多周期路径 (Multicycle Path)
//-----------------------------------------------------------------------------
# 对于需要多个时钟周期完成的路径，可以设置多周期路径约束
# set_multicycle_path -setup <num_cycles> -from [get_pins <source_pin>] -to [get_pins <destination_pin>]
# set_multicycle_path -hold <num_cycles-1> -from [get_pins <source_pin>] -to [get_pins <destination_pin>]
# 例如: 需要2个时钟周期的路径
# set_multicycle_path -setup 2 -from [get_pins reg_slow/Q] -to [get_pins reg_fast/D]
# set_multicycle_path -hold 1 -from [get_pins reg_slow/Q] -to [get_pins reg_fast/D]

//-----------------------------------------------------------------------------
// 输入延迟 (Input Delays)
//-----------------------------------------------------------------------------
# 以下是自动生成的输入延迟约束，请根据实际情况修改
set_input_delay -clock dft_scan_clk -max 3.0 [get_ports cpha]
set_input_delay -clock dft_scan_clk -min 1.0 [get_ports cpha]
set_input_delay -clock dft_scan_clk -max 3.0 [get_ports cpol]
set_input_delay -clock dft_scan_clk -min 1.0 [get_ports cpol]
set_input_delay -clock dft_scan_clk -max 3.0 [get_ports dft_test_mode]
set_input_delay -clock dft_scan_clk -min 1.0 [get_ports dft_test_mode]
set_input_delay -clock spi_clk -max 3.0 [get_ports spi_cs]
set_input_delay -clock spi_clk -min 1.0 [get_ports spi_cs]
set_input_delay -clock spi_clk -max 3.0 [get_ports spi_scl]
set_input_delay -clock spi_clk -min 1.0 [get_ports spi_scl]