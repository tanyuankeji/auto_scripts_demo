{# C语言头文件模板 #}
/**
 * @file {{ module_name }}.h
 * @brief 自动生成的寄存器定义头文件
 * @note 生成时间: {{ timestamp }}
 * @version {{ generator_version }}
 */

#ifndef {{ module_name|upper }}_H
#define {{ module_name|upper }}_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* 寄存器地址定义 */
{% if registers %}
{% for reg in registers %}
#define {{ module_name|upper }}_{{ reg.name|upper }}_ADDR      0x{{ '%X' % reg.address|int(0) }}U  /**< {{ reg.description }} */
{% endfor %}
{% endif %}

/* 寄存器位宽定义 */
#define {{ module_name|upper }}_DATA_WIDTH     {{ data_width }}U
#define {{ module_name|upper }}_ADDR_WIDTH     {{ addr_width }}U

/* 寄存器位域定义 */
{% if fields is defined %}
{% for field in fields %}
/* {{ field.register }} - {{ field.name }} */
{% if ':' in field.bit_range %}
{% set msb, lsb = field.bit_range.split(':') %}
#define {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_POS      {{ lsb }}U
#define {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK     ({{ '0x%X' % ((2 ** (int(msb)-int(lsb)+1)) - 1) }}U << {{ lsb }}U)
{% else %}
#define {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_POS      {{ field.bit_range }}U
#define {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK     (1U << {{ field.bit_range }}U)
{% endif %}
{% endfor %}
{% endif %}

/* 寄存器访问宏定义 */
{% if fields is defined %}
{% for field in fields %}
/* {{ field.register }} - {{ field.name }} 读写宏 */
{% if ':' in field.bit_range %}
{% set msb, lsb = field.bit_range.split(':') %}
#define {{ module_name|upper }}_GET_{{ field.register }}_{{ field.name }}(reg_val)  \
    (((reg_val) & {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK) >> {{ lsb }}U)
    
#define {{ module_name|upper }}_SET_{{ field.register }}_{{ field.name }}(reg_val, value)  \
    (((reg_val) & ~{{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK) | \
    (((value) << {{ lsb }}U) & {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK))
{% else %}
#define {{ module_name|upper }}_GET_{{ field.register }}_{{ field.name }}(reg_val)  \
    (((reg_val) & {{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK) >> {{ field.bit_range }}U)
    
#define {{ module_name|upper }}_SET_{{ field.register }}_{{ field.name }}(reg_val, value)  \
    (((reg_val) & ~{{ module_name|upper }}_{{ field.register }}_{{ field.name }}_MASK) | \
    (((value) ? 1U : 0U) << {{ field.bit_range }}U))
{% endif %}
{% endfor %}
{% endif %}

/* 寄存器类型定义 */
typedef struct {
{% if registers %}
{% for reg in registers %}
    uint{{ reg.width|default(data_width) }}_t {{ reg.name|lower }};  /**< {{ reg.description }} */
{% endfor %}
{% endif %}
} {{ module_name }}_regs_t;

#ifdef __cplusplus
}
#endif

#endif /* {{ module_name|upper }}_H */ 