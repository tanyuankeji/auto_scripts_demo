{# APB总线接口模板 #}
// =============================================================================
// 自动生成的APB接口寄存器文件: {{ module_name }}
// 
// 生成时间: {{ generation_time }}
// =============================================================================
`timescale 1ns / 1ps

module {{ module_name }} (
    // 时钟和复位
    input  wire                      clk,
    input  wire                      rst_n,
    
    // APB总线接口
    input  wire [{{ addr_width-1 }}:0]  paddr,
    input  wire                      psel,
    input  wire                      penable,
    input  wire                      pwrite,
    input  wire [{{ data_width-1 }}:0]  pwdata,
    output wire [{{ data_width-1 }}:0]  prdata,
    output wire                      pready,
    output wire                      pslverr,
    
    // 寄存器接口信号
{% for reg in registers %}
    // {{ reg.name }} - {{ reg.description|default('寄存器') }}
{% if reg.type in ['ReadOnly', 'ReadWrite'] %}
    output wire [{{ data_width-1 }}:0] {{ reg.name|lower }}_o,  // 寄存器值输出
{% endif %}
{% if reg.type == 'ReadOnly' %}
    input  wire [{{ data_width-1 }}:0] {{ reg.name|lower }}_i,  // 硬件写入值
    input  wire                      {{ reg.name|lower }}_wen,  // 硬件写使能
{% endif %}
{% if reg.type in ['WriteOnly', 'ReadWrite', 'Write1Clean', 'Write0Clean', 'Write1Set', 'Write0Set', 'WriteOnce'] %}
    input  wire [{{ data_width-1 }}:0] {{ reg.name|lower }}_i,  // 硬件写入值
    input  wire                      {{ reg.name|lower }}_wen,  // 硬件写使能
{% endif %}
{% if reg.type in ['ReadClean', 'ReadSet'] %}
    output wire                      {{ reg.name|lower }}_read,  // 读取信号
{% endif %}
{% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
    output wire [{{ data_width-1 }}:0] {{ reg.name|lower }}_pulse,  // 脉冲输出
{% endif %}
{% endfor %}

    // 测试和调试接口
    input  wire                      test_mode
);

// ===========================================================================
// 内部信号定义
// ===========================================================================

// APB总线控制信号 - 符合APB协议的写读使能信号
// 根据APB协议，写操作在 psel=1 && penable=1 && pwrite=1 时有效
wire apb_write = psel && penable && pwrite;
// 根据APB协议，读操作在 psel=1 && pwrite=0 时开始，读数据在 penable=1 时有效
wire apb_read_setup = psel && !pwrite;
wire apb_read  = psel && penable && !pwrite;

// APB总线就绪信号 - 本设计总是准备好
assign pready  = 1'b1;

// APB总线错误信号 - 本设计不产生错误
assign pslverr = 1'b0;

// 地址解码信号
{% for reg in registers %}
wire sel_{{ reg.name|lower }} = (paddr == {{ addr_width }}'h{{ '%X' % reg.address if reg.address is number else reg.address|replace('0x', '')|replace('0h', '') }});
{% endfor %}

// 读取信号生成 - 用于ReadClean和ReadSet类型
{% for reg in registers %}
{% if reg.type in ['ReadClean', 'ReadSet'] %}
reg {{ reg.name|lower }}_read_reg;
assign {{ reg.name|lower }}_read = {{ reg.name|lower }}_read_reg;
{% endif %}
{% endfor %}

// 寄存器定义
{% for reg in registers %}
reg [{{ data_width-1 }}:0] {{ reg.name|lower }}_reg;  // {{ reg.description|default('寄存器') }}
{% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
reg [{{ data_width-1 }}:0] {{ reg.name|lower }}_pulse_reg;  // 脉冲寄存器
{% endif %}
{% if reg.type == 'WriteOnce' %}
reg {{ reg.name|lower }}_written;  // 写入状态标志
{% endif %}
{% endfor %}

// 读数据选择
reg [{{ data_width-1 }}:0] prdata_reg;
assign prdata = prdata_reg;

// ===========================================================================
// 寄存器读取逻辑
// ===========================================================================
always @(*) begin
    prdata_reg = {{ data_width }}'d0;  // 默认返回全0
    
    // 清除所有读事件信号
{% for reg in registers %}
{% if reg.type in ['ReadClean', 'ReadSet'] %}
    {{ reg.name|lower }}_read_reg = 1'b0;
{% endif %}
{% endfor %}
    
    if (apb_read_setup) begin
{% for reg in registers %}
{% if reg.type not in ['WriteOnly'] %}
        if (sel_{{ reg.name|lower }}) begin
            prdata_reg = {{ reg.name|lower }}_reg;
{% if reg.type in ['ReadClean', 'ReadSet'] %}
            {{ reg.name|lower }}_read_reg = 1'b1;  // 设置读取事件
{% endif %}
        end
{% endif %}
{% endfor %}
    end
end

// ===========================================================================
// 寄存器输出信号连接
// ===========================================================================
{% for reg in registers %}
{% if reg.type in ['ReadOnly', 'ReadWrite'] %}
assign {{ reg.name|lower }}_o = {{ reg.name|lower }}_reg;
{% endif %}

{% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
assign {{ reg.name|lower }}_pulse = {{ reg.name|lower }}_pulse_reg;
{% endif %}
{% endfor %}

// ===========================================================================
// 寄存器写入逻辑
// ===========================================================================
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        // 复位所有寄存器到默认值
{% for reg in registers %}
        {{ reg.name|lower }}_reg <= {{ data_width }}'h{{ '%X' % reg.reset_value if reg.reset_value is number else reg.reset_value|default('0')|replace('0x', '')|replace('0h', '') }};
{% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
        {{ reg.name|lower }}_pulse_reg <= {{ data_width }}'h0;
{% endif %}
{% if reg.type == 'WriteOnce' %}
        {{ reg.name|lower }}_written <= 1'b0;
{% endif %}
{% endfor %}
    end
    else begin
        // 默认清零脉冲寄存器
{% for reg in registers %}
{% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
        {{ reg.name|lower }}_pulse_reg <= {{ data_width }}'h0;
{% endif %}
{% endfor %}

        // 处理读后自动置位或清零的寄存器
{% for reg in registers %}
{% if reg.type == 'ReadClean' %}
        if ({{ reg.name|lower }}_read_reg) begin
            {{ reg.name|lower }}_reg <= {{ data_width }}'h0;  // 读后清零
        end
{% elif reg.type == 'ReadSet' %}
        if ({{ reg.name|lower }}_read_reg) begin
            {{ reg.name|lower }}_reg <= {{ data_width }}'hFFFFFFFF;  // 读后置位
        end
{% endif %}
{% endfor %}

        // APB总线写入（软件写入）
        if (apb_write) begin
{% for reg in registers %}
{% if reg.type not in ['ReadOnly'] %}
            if (sel_{{ reg.name|lower }}) begin
{% if reg.type == 'ReadWrite' %}
                {{ reg.name|lower }}_reg <= pwdata;
{% elif reg.type == 'WriteOnly' %}
                {{ reg.name|lower }}_reg <= pwdata;
{% elif reg.type == 'Write1Clean' or reg.type == 'Write1Clear' %}
                {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & ~pwdata;  // 写1清零
{% elif reg.type == 'Write0Clean' or reg.type == 'Write0Clear' %}
                {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & pwdata;  // 写0清零
{% elif reg.type == 'Write1Set' %}
                {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | pwdata;  // 写1置位
{% elif reg.type == 'Write0Set' %}
                {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | ~pwdata;  // 写0置位
{% elif reg.type == 'Write1Pulse' %}
                {{ reg.name|lower }}_pulse_reg <= pwdata;  // 写1产生脉冲
{% elif reg.type == 'Write0Pulse' %}
                {{ reg.name|lower }}_pulse_reg <= ~pwdata;  // 写0产生脉冲
{% elif reg.type == 'WriteOnce' %}
                if (!{{ reg.name|lower }}_written) begin  // 仅允许写一次
                    {{ reg.name|lower }}_reg <= pwdata;
                    {{ reg.name|lower }}_written <= 1'b1;  // 设置写入标志
                end
{% endif %}
            end
{% endif %}
{% endfor %}
        end

        // 硬件接口写入 - 通常优先级高于软件写入
{% for reg in registers %}
{% if reg.type in ['ReadOnly', 'ReadWrite', 'WriteOnly', 'Write1Clean', 'Write0Clean', 'Write1Set', 'Write0Set', 'WriteOnce'] %}
        if ({{ reg.name|lower }}_wen) begin
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_i;
{% if reg.type == 'WriteOnce' %}
            {{ reg.name|lower }}_written <= 1'b1;  // 设置写入标志
{% endif %}
        end
{% endif %}
{% endfor %}
    end
end

endmodule 