// =============================================================================
// 自动生成的寄存器文件: {{ module_name }}
// 生成时间: {{ generation_time }}
// =============================================================================

{% if enable_debug_info|default(false) %}
// =============================================================================
// 调试信息（仅在开启调试模式时生成）
// =============================================================================
// DEBUG: 字段位置信息
{% for reg in registers %}
// {{ reg.name }} 寄存器字段调试信息
{% if reg.has_fields %}
// 原始字段数量: {{ reg.fields|length }}
{% for field in reg.fields %}
// 字段名: {{ field.name }}, 位范围: high={{ field.bit_range.high }}, low={{ field.bit_range.low }}, width={{ field.width }}
{% endfor %}
{% endif %}
{% endfor %}

// DEBUG: 寄存器宽度信息
{% for reg in registers %}
// {{ reg.name }} 寄存器宽度: {{ reg.width }}
{% endfor %}
// =============================================================================
{% endif %}

`timescale 1ns / 1ps

module {{ module_name }} (
    // 系统信号
    input  wire                     clk,
    input  wire                     rst_n,
    
    // 总线接口
    input  wire [{{ addr_width-1 }}:0]     addr,
    input  wire                     chip_select,
    input  wire                     write_en,
    input  wire                     read_en,
    input  wire [{{ data_width-1 }}:0]     write_data,
    output reg  [{{ data_width-1 }}:0]     read_data,
    output wire                     data_valid,
    
{% if byte_enable|default(false) %}
    input  wire [{{ (data_width//8)-1 }}:0] byte_enable{% if ports|length > 0 %},{% endif %}
    
{% endif %}
{# 收集所有端口定义到列表中 #}
{% set ports = [] %}
{% for reg in registers %}
{% if reg.has_no_fields %}
{# 计算无子字段寄存器的位宽，使用指定的width或默认data_width #}
{% set reg_width = reg.width|default(data_width) %}
{% if reg.type in ['ReadOnly', 'ReadWrite'] %}
{% set _ = ports.append('    output wire [' ~ (reg_width-1) ~ ':0]      ' ~ reg.name|lower ~ '_o') %}
{% endif %}
{% if reg.type in ['WriteOnly', 'ReadWrite', 'Write1Clean', 'Write0Clean', 'Write1Set', 'Write0Set'] %}
{% set _ = ports.append('    input  wire [' ~ (reg_width-1) ~ ':0]      ' ~ reg.name|lower ~ '_i') %}
{% set _ = ports.append('    input  wire                      ' ~ reg.name|lower ~ '_wen') %}
{% endif %}
{% else %}
{% for field in reg.fields %}
{% set field_high = field.bit_range.high %}
{% set field_low = field.bit_range.low %}
{% set field_width = field_high - field_low + 1 %}
{% if field.type in ['ReadOnly', 'ReadWrite'] %}
{% set _ = ports.append('    output wire [' ~ (field_width-1) ~ ':0]      ' ~ reg.name|lower ~ '_' ~ field.name|lower ~ '_o') %}
{% endif %}
{% if field.type in ['ReadOnly', 'WriteOnly', 'ReadWrite', 'Write1Clean', 'Write0Clean', 'Write1Set', 'Write0Set', 'Write1Pulse', 'Write0Pulse'] %}
{% set _ = ports.append('    input  wire [' ~ (field_width-1) ~ ':0]      ' ~ reg.name|lower ~ '_' ~ field.name|lower ~ '_i') %}
{% set _ = ports.append('    input  wire                       ' ~ reg.name|lower ~ '_' ~ field.name|lower ~ '_wen') %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

{# 输出端口定义，只有最后一个没有逗号 #}
{% for port in ports %}
{% if loop.last %}
{{ port }}
{% else %}
{{ port }},
{% endif %}
{% endfor %}
);

// =============================================================================
// 字段位置定义
// =============================================================================

{% for reg in registers %}
{% if reg.has_fields %}
// {{ reg.name }} 字段位置定义
{% for field in reg.fields %}
{% set field_high = field.bit_range.high %}
{% set field_low = field.bit_range.low %}
{% set field_width = field_high - field_low + 1 %}
localparam {{ reg.name|upper }}_{{ field.name|upper }}_POS   = {{ field_low }};
localparam {{ reg.name|upper }}_{{ field.name|upper }}_WIDTH = {{ field_width }};
{% endfor %}
{% endif %}
{% endfor %}

// =============================================================================
// 寄存器位宽定义 - 架构优化：使用预计算的寄存器位宽
// =============================================================================
{% for reg in registers %}
localparam {{ reg.name }}_WIDTH = {{ reg.width }};
{% endfor %}

// =============================================================================
// 控制信号定义
// =============================================================================

// 控制信号
wire write_active = chip_select && write_en;
wire read_active = chip_select && read_en;
assign data_valid = read_active;

// 地址选择信号
{% for reg in registers %}
wire sel_{{ reg.name|lower }} = (addr == 8'h{{ '%02X' % reg.address|replace('0x', '')|int(16) if reg.address is string else '%02X' % reg.address }});
{% endfor %}

// =============================================================================
// 寄存器定义
// =============================================================================

{% for reg in registers %}
// {{ reg.name }} 寄存器 - {{ reg.description|default('') }}
reg [{{ reg.name|upper }}_WIDTH-1:0] {{ reg.name|lower }};
{% endfor %}

{% for reg in registers %}
{% if reg.has_fields %}
// {{ reg.name }} 字段寄存器
{% for field in reg.fields %}
{% set field_high = field.bit_range.high %}
{% set field_low = field.bit_range.low %}
{% set field_width = field_high - field_low + 1 %}
reg [{{ field_width-1 }}:0] {{ reg.name|lower }}_{{ field.name|lower }}_reg;  // {{ field.description|default('') }}
{% endfor %}
{% endif %}
{% endfor %}

// =============================================================================
// 字段与寄存器连接
// =============================================================================

{% for reg in registers %}
{% if reg.has_fields %}
// {{ reg.name }} 寄存器组合
always @(*) begin
    {{ reg.name|lower }} = {
        {(32-{{ reg.name|upper }}_WIDTH){1'b0}},  // 高位填充
{% set prev_field_low = 0 %}
{% set prev_field_high = 0 %}
{% for field in reg.fields|sort(attribute='bit_range.high', reverse=true) %}
    {% set field_high = field.bit_range.high %}
    {% set field_low = field.bit_range.low %}
    {% if not loop.first %}
        {% if loop.first == False and field_high < prev_field_low - 1 %}
        {({{ prev_field_low - field_high - 1 }}){1'b0}},  // 中间位填充
        {% endif %}
    {% endif %}
    {% set prev_field_low = field_low %}
    {% set prev_field_high = field_high %}
        {{ reg.name|lower }}_{{ field.name|lower }}_reg{% if not loop.last %},{% endif %}
{% endfor %}
    };
end

// {{ reg.name }} 字段接口连接
{% for field in reg.fields %}
{% if field.type in ['ReadOnly', 'ReadWrite'] %}
assign {{ reg.name|lower }}_{{ field.name|lower }}_o = {{ reg.name|lower }}_{{ field.name|lower }}_reg;
{% endif %}
{% endfor %}
{% else %}
{% if reg.type in ['ReadOnly', 'ReadWrite'] %}
assign {{ reg.name|lower }}_o = {{ reg.name|lower }};
{% endif %}
{% endif %}
{% endfor %}

// =============================================================================
// 读取逻辑
// =============================================================================
always @(*) begin
    read_data = {{ data_width }}'d0;  // 默认值
    
    if (read_active) begin
        {% for reg in registers %}
        {% if loop.first %}
        if (sel_{{ reg.name|lower }}) begin
        {% else %}
        else if (sel_{{ reg.name|lower }}) begin
        {% endif %}
            {% if reg.has_fields %}
            read_data = {(32-{{ reg.name|upper }}_WIDTH){1'b0}, {{ reg.name|lower }}};
            {% elif reg.name == 'WRITEONLY_REG' %}
            read_data = {{ data_width }}'d0; // 只写寄存器，读取返回0
            {% elif reg.name == 'WRITE1SET_REG' %}
            read_data = {(32-{{ reg.name|upper }}_WIDTH){1'b0}, {{ reg.name|lower }}};
            {% else %}
            read_data = {(32-{{ reg.name|upper }}_WIDTH){1'b0}, {{ reg.name|lower }}};
            {% endif %}
        end
        {% endfor %}
        else begin
            read_data = {{ data_width }}'d0;
        end
    end
end

// =============================================================================
// 寄存器更新逻辑
// =============================================================================
{% for reg in registers %}
{% if reg.has_fields %}
// {{ reg.name }} 子字段寄存器更新
{% for field in reg.fields %}
// {{ field.name|upper }} 字段
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        // 使用字段特定的复位值或从寄存器复位值中提取
        {{ reg.name|lower }}_{{ field.name|lower }}_reg <= {{ field.width }}'h{{ '%X' % field.reset_value|replace('0x', '')|int(16) if field.reset_value is string else '%X' % field.reset_value|default(0) }};
    end
    else begin
        // 软件优先
        if (write_active && sel_{{ reg.name|lower }}) begin
            {%- if field.type == 'ReadOnly' %}
            // 只读字段，忽略软件写入
            {%- elif field.type == 'WritePulse' or field.type == 'Write1Pulse' %}
            // 写脉冲，下一个周期自动清零
            {{ reg.name|lower }}_{{ field.name|lower }}_reg <= write_data[{{ field.bit_range.high }}:{{ field.bit_range.low }}];
            {%- elif field.type == 'Write1Set' %}
            {{ reg.name|lower }}_{{ field.name|lower }}_reg <= {{ reg.name|lower }}_{{ field.name|lower }}_reg | write_data[{{ field.bit_range.high }}:{{ field.bit_range.low }}];
            {%- elif field.type == 'Write1Clean' or field.type == 'Write1Clear' %}
            {{ reg.name|lower }}_{{ field.name|lower }}_reg <= {{ reg.name|lower }}_{{ field.name|lower }}_reg & ~write_data[{{ field.bit_range.high }}:{{ field.bit_range.low }}];
            {%- else %}
            {{ reg.name|lower }}_{{ field.name|lower }}_reg <= write_data[{{ field.bit_range.high }}:{{ field.bit_range.low }}];
            {%- endif %}
        end
        else if ({{ reg.name|lower }}_{{ field.name|lower }}_wen) begin
            {{ reg.name|lower }}_{{ field.name|lower }}_reg <= {{ reg.name|lower }}_{{ field.name|lower }}_i;
        end
        {%- if field.type == 'WritePulse' or field.type == 'Write1Pulse' %}
        else begin
            // 脉冲类型字段在没有写入时自动清零
            {{ reg.name|lower }}_{{ field.name|lower }}_reg <= {{ field.width }}'h0;
        end
        {%- else %}
        end
        {%- endif %}
    end
end
{% endfor %}

{% else %}
// {{ reg.name }} 寄存器 (无子字段)
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        {{ reg.name|lower }} <= {{ data_width if reg.width > data_width else reg.width }}'h{{ '%X' % reg.reset_value|replace('0x', '')|int(16) if reg.reset_value is string else '%X' % reg.reset_value|default(0) }};
    end
    else begin
        // 软件优先
        if (write_active && sel_{{ reg.name|lower }}) begin
            {%- if reg.type == 'ReadOnly' %}
            // 只读寄存器，忽略软件写入
            {%- elif reg.type == 'Write1Set' or reg.type == 'WRITE1SET_REG' %}
            {{ reg.name|lower }} <= {{ reg.name|lower }} | write_data[{{ reg.width-1 if reg.width else data_width-1 }}:0];
            {%- elif reg.type == 'Write1Clean' or reg.type == 'Write1Clear' %}
            {{ reg.name|lower }} <= {{ reg.name|lower }} & ~write_data[{{ reg.width-1 if reg.width else data_width-1 }}:0];
            {%- elif reg.type == 'WritePulse' or reg.type == 'Write1Pulse' %}
            {{ reg.name|lower }} <= write_data[{{ reg.width-1 if reg.width else data_width-1 }}:0];
            {%- else %}
            {{ reg.name|lower }} <= write_data[{{ reg.width-1 if reg.width else data_width-1 }}:0];
            {%- endif %}
        end
        else if ({{ reg.name|lower }}_wen) begin
            {{ reg.name|lower }} <= {{ reg.name|lower }}_i;
        end
        {%- if reg.type == 'WritePulse' or reg.type == 'Write1Pulse' %}
        else begin
            // 脉冲类型寄存器在没有写入时自动清零
            {{ reg.name|lower }} <= {{ data_width if reg.width > data_width else reg.width }}'h0;
        end
        {%- else %}
        end
        {%- endif %}
    end
end
{% endif %}

{% endfor %}
endmodule 