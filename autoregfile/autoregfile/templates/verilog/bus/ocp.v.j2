// ----------------------------------------------------------------------------
// Open Core Protocol (OCP) 总线接口寄存器文件
// 生成日期: {{ generation_time }}
// 模块名称: {{ module_name }}
// ----------------------------------------------------------------------------

`timescale 1ns / 1ps

module {{ module_name }} #(
    // 参数定义
    parameter ADDR_WIDTH = {{ addr_width }},              // 地址宽度
    parameter DATA_WIDTH = {{ data_width }}               // 数据宽度
) (
    // 系统信号
    input  wire                      clk,                 // 时钟信号
    input  wire                      rst_n,               // 异步复位，低电平有效
    
    // OCP接口信号
    // 主端口信号
    input  wire [ADDR_WIDTH-1:0]     MAddr,               // 地址
    input  wire [2:0]                MCmd,                // 命令 (0:空闲, 1:写, 2:读)
    input  wire [DATA_WIDTH-1:0]     MData,               // 写数据
    input  wire [DATA_WIDTH/8-1:0]   MByteEn,             // 字节使能
    input  wire                      MRespAccept,         // 响应接收标志
    
    // 从端口信号
    output wire [DATA_WIDTH-1:0]     SData,               // 读数据
    output wire [1:0]                SResp,               // 响应状态 (0:空闲, 1:完成, 2:错误)
    output wire                      SCmdAccept,          // 命令接收标志
    
    {% if register_outputs %}
    // 寄存器信号
    {% for output in register_outputs %}
    {{ output.direction }} {% if output.width > 1 %}[{{ output.width-1 }}:0]{% endif %} {{ output.name }}{% if not loop.last %},{% endif %}
    {% endfor %}
    {% endif %}
);

    // OCP命令定义
    localparam OCP_CMD_IDLE  = 3'b000;  // 空闲
    localparam OCP_CMD_WRITE = 3'b001;  // 写操作
    localparam OCP_CMD_READ  = 3'b010;  // 读操作
    
    // OCP响应定义
    localparam OCP_RESP_NULL  = 2'b00;  // 无响应/空闲
    localparam OCP_RESP_DVA   = 2'b01;  // 数据有效/接收确认
    localparam OCP_RESP_ERR   = 2'b10;  // 错误
    
    // 内部信号定义
    reg [DATA_WIDTH-1:0]      read_data_reg;              // 读数据寄存器
    reg [1:0]                 resp_reg;                   // 响应寄存器
    reg                       cmd_accept_reg;             // 命令接收寄存器
    wire                      is_write;                   // 写操作标志
    wire                      is_read;                    // 读操作标志
    wire [ADDR_WIDTH-3:0]     reg_addr;                   // 寄存器地址(按字对齐)
    
    // 状态机定义
    localparam S_IDLE     = 2'b00;  // 空闲状态
    localparam S_EXECUTE  = 2'b01;  // 执行状态
    localparam S_RESPOND  = 2'b10;  // 响应状态
    
    reg [1:0] state;       // 当前状态
    reg [1:0] next_state;  // 下一状态
    
    // 脉冲寄存器相关信号
    {% for reg in registers %}
    {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
    reg [DATA_WIDTH-1:0]      {{ reg.name|lower }}_pulse_reg;      // {{ reg.description }} 脉冲寄存器
    {% endif %}
    {% endfor %}
    
    // OCP控制信号
    assign is_write = (MCmd == OCP_CMD_WRITE);
    assign is_read = (MCmd == OCP_CMD_READ);
    assign reg_addr = MAddr[ADDR_WIDTH-1:2];  // 字对齐
    
    // 输出信号连接
    assign SData = read_data_reg;
    assign SResp = resp_reg;
    assign SCmdAccept = cmd_accept_reg;
    
    {% if register_outputs %}
    // 寄存器信号定义
    {% for reg in registers %}
    reg [DATA_WIDTH-1:0]      {{ reg.name|lower }}_reg;     // {{ reg.description }}
    {% if 'locked_by' in reg %}
    wire                      {{ reg.name|lower }}_locked;  // {{ reg.name }} 锁定信号
    {% endif %}
    {% endfor %}
    {% endif %}
    
    // 输出信号连接
    {% for reg in registers %}
    {% for field in reg.fields|default([]) %}
    {% if field.output %}
    assign {{ field.output }} = {{ reg.name|lower }}_reg[{{ field.bits }}];
    {% endif %}
    {% endfor %}
    {% endfor %}
    
    // 脉冲输出信号连接
    {% for reg in registers %}
    {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
    assign {{ reg.name|lower }}_pulse = {{ reg.name|lower }}_pulse_reg;
    {% endif %}
    {% endfor %}
    
    // 寄存器锁定逻辑
    {% for reg in registers %}
    {% if 'locked_by' in reg %}
    assign {{ reg.name|lower }}_locked = 
    {% for lock_reg in reg.locked_by %}
    {% if 'lock_condition' in reg %}
    {{ lock_reg|lower }}_reg[{{ reg.lock_condition }}]{% if not loop.last %} || {% endif %}
    {% else %}
    {{ lock_reg|lower }}_reg[0]{% if not loop.last %} || {% endif %}
    {% endif %}
    {% endfor %};
    {% endif %}
    {% endfor %}
    
    // 状态机 - 时序逻辑
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= S_IDLE;
        end else begin
            state <= next_state;
        end
    end
    
    // 状态机 - 组合逻辑
    always @(*) begin
        next_state = state;
        
        case (state)
            S_IDLE: begin
                if (MCmd != OCP_CMD_IDLE)
                    next_state = S_EXECUTE;
            end
            
            S_EXECUTE: begin
                next_state = S_RESPOND;
            end
            
            S_RESPOND: begin
                if (MRespAccept)
                    next_state = S_IDLE;
            end
            
            default: begin
                next_state = S_IDLE;
            end
        endcase
    end
    
    // 主控制逻辑
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            read_data_reg <= {DATA_WIDTH{1'b0}};
            resp_reg <= OCP_RESP_NULL;
            cmd_accept_reg <= 1'b0;
        end else begin
            // 默认值
            cmd_accept_reg <= 1'b0;
            
            case (state)
                S_IDLE: begin
                    resp_reg <= OCP_RESP_NULL;
                    
                    // 命令接收信号
                    if (MCmd != OCP_CMD_IDLE)
                        cmd_accept_reg <= 1'b1;
                end
                
                S_EXECUTE: begin
                    if (is_read) begin
                        // 读操作处理
                        case (reg_addr)
                            {% for reg in registers %}
                            'h{{ reg.address|replace('0x', '') }}: begin
                                read_data_reg <= {{ reg.name|lower }}_reg;
                                resp_reg <= OCP_RESP_DVA;
                            end
                            {% endfor %}
                            
                            default: begin
                                // 读取不存在的寄存器地址
                                read_data_reg <= {DATA_WIDTH{1'b0}};
                                resp_reg <= OCP_RESP_ERR;
                            end
                        endcase
                    end
                    else if (is_write) begin
                        // 写操作默认响应
                        resp_reg <= OCP_RESP_DVA;
                        
                        // 寄存器写入处理
                        case (reg_addr)
                            {% for reg in registers %}
                            'h{{ reg.address|replace('0x', '') }}: begin
                                {% if reg.type != 'ReadOnly' %}
                                {% if 'locked_by' in reg %}
                                if (!{{ reg.name|lower }}_locked) begin
                                {% endif %}
                                    {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
                                    // 脉冲寄存器特殊处理
                                    {% if reg.type == 'Write1Pulse' %}
                                    // Write1Pulse类型 - 写1产生脉冲
                                    {{ reg.name|lower }}_pulse_reg <= MData & {{ '{DATA_WIDTH{1\'b1}}' }};
                                    {% else %}
                                    // Write0Pulse类型 - 写0产生脉冲
                                    {{ reg.name|lower }}_pulse_reg <= ~MData & {{ '{DATA_WIDTH{1\'b1}}' }};
                                    {% endif %}
                                    {% else %}
                                    // 普通寄存器字节使能写入
                                    {% for i in range(4) %}
                                    if (MByteEn[{{ i }}]) {{ reg.name|lower }}_reg[{{ i*8+7 }}:{{ i*8 }}] <= MData[{{ i*8+7 }}:{{ i*8 }}];
                                    {% endfor %}
                                    {% endif %}
                                {% if 'locked_by' in reg %}
                                end else begin
                                    // 寄存器已锁定，忽略写入
                                    resp_reg <= OCP_RESP_ERR;
                                end
                                {% endif %}
                                {% else %}
                                // 尝试写只读寄存器
                                resp_reg <= OCP_RESP_ERR;
                                {% endif %}
                            end
                            {% endfor %}
                            
                            default: begin
                                // 写入不存在的寄存器地址
                                resp_reg <= OCP_RESP_ERR;
                            end
                        endcase
                    end
                end
                
                S_RESPOND: begin
                    if (MRespAccept) begin
                        resp_reg <= OCP_RESP_NULL;
                    end
                end
                
                default: begin
                    resp_reg <= OCP_RESP_NULL;
                    cmd_accept_reg <= 1'b0;
                end
            endcase
        end
    end
    
    // 寄存器重置和更新逻辑
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // 寄存器复位值初始化
            {% for reg in registers %}
            {{ reg.name|lower }}_reg <= {{ reg.reset_value }};
            {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
            {{ reg.name|lower }}_pulse_reg <= {DATA_WIDTH{1'b0}};
            {% endif %}
            {% endfor %}
        end else begin
            // 清除脉冲寄存器 - 脉冲只持续一个时钟周期
            {% for reg in registers %}
            {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
            {{ reg.name|lower }}_pulse_reg <= {DATA_WIDTH{1'b0}};
            {% endif %}
            {% endfor %}
            
            // 写清除(Write1Clear)类型寄存器处理
            {% for reg in registers %}
            {% if reg.type == 'Write1Clear' %}
            // 如果在EXECUTE状态且地址匹配，则执行写清除操作
            if (state == S_EXECUTE && reg_addr == 'h{{ reg.address|replace('0x', '') }} && is_write) begin
                {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & ~MData;
            end
            {% endif %}
            {% endfor %}
            
            // 外部信号输入寄存器处理
            {% for reg in registers %}
            {% if reg.type == 'ReadOnly' %}
            {% for field in reg.fields|default([]) %}
            {% if field.input %}
            {{ reg.name|lower }}_reg[{{ field.bits }}] <= {{ field.input }};
            {% endif %}
            {% endfor %}
            {% endif %}
            {% endfor %}
        end
    end

endmodule 