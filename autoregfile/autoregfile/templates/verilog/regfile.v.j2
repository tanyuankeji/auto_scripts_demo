{# Verilog寄存器文件模板 #}
// 自动生成的寄存器文件
// 生成时间: {{ timestamp }}
// 生成器版本: {{ generator_version }}

module {{ module_name }} (
    input wire                      clk,
    input wire                      rst_n,
    
{% for i in range(num_write_ports) %}
    // 写端口 {{ i }}
    input wire                      wr_en_{{ i }},
    input wire [{{ addr_width-1 }}:0]  wr_addr_{{ i }},
    input wire [{{ data_width-1 }}:0]  wr_data_{{ i }},
{% if byte_enable %}
    input wire [{{ (data_width//8)-1 }}:0]  wr_be_{{ i }},
{% endif %}
{% endfor %}
    
{% for i in range(num_read_ports) %}
{% if i == 0 and num_write_ports > 0 %}
    // 读端口 {{ i }}
{% endif %}
{% if i < num_read_ports - 1 %}
    input wire [{{ addr_width-1 }}:0]  rd_addr_{{ i }},
    output reg [{{ data_width-1 }}:0]  rd_data_{{ i }},
{% else %}
    input wire [{{ addr_width-1 }}:0]  rd_addr_{{ i }},
    output reg [{{ data_width-1 }}:0]  rd_data_{{ i }}
{% endif %}
{% endfor %}
);

{% if registers %}
// 寄存器地址常量定义
{% for reg in registers %}
localparam ADDR_{{ reg.name|upper }} = {{ addr_width }}'h{{ '%X' % reg.address|int(0) }};   // {{ reg.description }}{% if reg.type %} ({{ reg.type }}类型){% endif %}
{% endfor %}

// 寄存器声明
{% for reg in registers %}
reg [{{ reg.width|default(data_width)-1 }}:0] {{ reg.name|lower }}_reg;{{ ' ' * (20 - reg.name|lower|length) }}// {{ reg.description }}
{% if reg.type in ['WriteOnce', 'WriteOnlyOnce'] %}
reg        {{ reg.name|lower }}_written;{{ ' ' * (20 - reg.name|lower|length) }}// {{ reg.name|lower }} 写标志
{% endif %}
{% endfor %}
{% else %}
// 未定义特定寄存器
reg [{{ data_width-1 }}:0] reg_array [0:{{ 2**addr_width-1 }}];
{% endif %}

// 复位和写逻辑
always @({{ 'posedge clk' if sync_reset else 'posedge clk or negedge rst_n' }}) begin
    if ({{ 'rst_n == 1\'b0' if sync_reset else '!rst_n' }}) begin
{% if registers %}
    {% for reg in registers %}
        {{ reg.name|lower }}_reg <= {{ reg.width|default(data_width) }}'{{ 'h' if reg.reset_value|string|startswith('0x') else 'd' }}{{ reg.reset_value|string|replace('0x', '') }};
        {% if reg.type in ['WriteOnce', 'WriteOnlyOnce'] %}
        {{ reg.name|lower }}_written <= 1'b0;
        {% endif %}
    {% endfor %}
{% else %}
        integer i;
        for (i = 0; i < {{ 2**addr_width }}; i = i + 1) begin
            reg_array[i] <= {{ data_width }}'d{{ reset_value }};
        end
{% endif %}
    end
    else begin
{% if registers %}
    {% for i in range(num_write_ports) %}
        {% for reg in registers %}
        {# 根据寄存器类型生成不同的写逻辑 #}
        {% if reg.type == 'ReadOnly' or reg.type == 'Null' %}
        // {{ reg.name }} 是{{ '只读' if reg.type == 'ReadOnly' else 'Null类型' }}寄存器，忽略写操作
        {% elif reg.type == 'WriteOnly' %}
        // {{ reg.name }} 是WriteOnly类型寄存器
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'WriteOnce' or reg.type == 'WriteOnlyOnce' %}
        // {{ reg.name }} 是{{ reg.type }}类型寄存器，只写一次
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }} && !{{ reg.name|lower }}_written) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= wr_data_{{ i }};
            {% endif %}
            {{ reg.name|lower }}_written <= 1'b1; // 设置写标志
        end
        {% elif reg.type == 'Write1Clean' %}
        // {{ reg.name }} 是Write1Clean类型寄存器，写1清零对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] & ~wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & ~wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write1Set' %}
        // {{ reg.name }} 是Write1Set类型寄存器，写1置位对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] | wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write0Clean' %}
        // {{ reg.name }} 是Write0Clean类型寄存器，写0清零对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] & (wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}] | ~wr_be_{{ i }}[{{ byte }}]);
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write0Set' %}
        // {{ reg.name }} 是Write0Set类型寄存器，写0置位对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] | (~wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}] & {8{wr_be_{{ i }}[{{ byte }}]}});
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | ~wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write1Toggle' %}
        // {{ reg.name }} 是Write1Toggle类型寄存器，写1翻转对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] ^ (wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}] & {8{wr_be_{{ i }}[{{ byte }}]}});
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg ^ wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write0Toggle' %}
        // {{ reg.name }} 是Write0Toggle类型寄存器，写0翻转对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] ^ (~wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}] & {8{wr_be_{{ i }}[{{ byte }}]}});
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg ^ ~wr_data_{{ i }};
            {% endif %}
        end
        {% else %}
        // {{ reg.name }} 是{{ reg.type }}类型寄存器
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= wr_data_{{ i }};
            {% endif %}
        end
        {% endif %}
        {% endfor %}
    {% endfor %}

        // 读操作触发的特殊逻辑
    {% for reg in registers %}
        {% if reg.type in ['ReadClean', 'WriteReadClean'] %}
        // 如果读端口读取了{{ reg.name }}，则清零（{{ reg.type }}类型）
        if ({% for i in range(num_read_ports) %}{{ 'rd_addr_%d == ADDR_%s'|format(i, reg.name|upper) }}{{ ' || ' if not loop.last }}{% endfor %}) begin
            {% for i in range(num_read_ports) %}
            if (rd_addr_{{ i }} == ADDR_{{ reg.name|upper }}) 
                {{ reg.name|lower }}_reg <= {{ reg.width|default(data_width) }}'d0;
            {% endfor %}
        end
        {% elif reg.type in ['ReadSet', 'WriteReadSet'] %}
        // 如果读端口读取了{{ reg.name }}，则置位（{{ reg.type }}类型）
        if ({% for i in range(num_read_ports) %}{{ 'rd_addr_%d == ADDR_%s'|format(i, reg.name|upper) }}{{ ' || ' if not loop.last }}{% endfor %}) begin
            {% for i in range(num_read_ports) %}
            if (rd_addr_{{ i }} == ADDR_{{ reg.name|upper }}) 
                {{ reg.name|lower }}_reg <= {{ reg.width|default(data_width) }}'hFFFFFFFF;
            {% endfor %}
        end
        {% endif %}
    {% endfor %}
{% else %}
    {% for i in range(num_write_ports) %}
        {% if byte_enable %}
        if (wr_en_{{ i }}) begin
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) reg_array[wr_addr_{{ i }}][{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
        end
        {% else %}
        if (wr_en_{{ i }}) begin
            reg_array[wr_addr_{{ i }}] <= wr_data_{{ i }};
        end
        {% endif %}
    {% endfor %}
{% endif %}
    end
end

{% for i in range(num_read_ports) %}
// 读端口{{ i }} 组合逻辑
always @(*) begin
    // 默认值为全0
    rd_data_{{ i }} = {{ data_width }}'d0;
    
{% if registers %}
    {% if registers|length <= 8 %}
    {# 对于寄存器数量较少的情况，使用if-else结构 #}
    {% for reg in registers %}
    {% if reg.type in ['Null', 'WriteOnly', 'WriteOnlyClean', 'WriteOnlySet', 'WriteOnlyOnce'] %}
    // {{ reg.name }} 是{{ reg.type }}类型寄存器，读取时返回0
    if (rd_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
        rd_data_{{ i }} = {{ reg.width|default(data_width) }}'d0;
    end
    {% else %}
    // {{ reg.name }} 是{{ reg.type }}类型寄存器
    if (rd_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
        rd_data_{{ i }} = {{ reg.name|lower }}_reg;
    end
    {% endif %}
    {% endfor %}
    {% else %}
    {# 对于寄存器数量较多的情况，使用case结构 #}
    case (rd_addr_{{ i }})
    {% for reg in registers %}
        ADDR_{{ reg.name|upper }}: rd_data_{{ i }} = {% if reg.type in ['Null', 'WriteOnly', 'WriteOnlyClean', 'WriteOnlySet', 'WriteOnlyOnce'] %}{{ reg.width|default(data_width) }}'d0{% else %}{{ reg.name|lower }}_reg{% endif %};  // {{ reg.type }} 类型
    {% endfor %}
        default: rd_data_{{ i }} = {{ data_width }}'d0;  // 未知地址返回0
    endcase
    {% endif %}
{% else %}
    rd_data_{{ i }} = reg_array[rd_addr_{{ i }}];
{% endif %}
end

{% endfor %}
endmodule 