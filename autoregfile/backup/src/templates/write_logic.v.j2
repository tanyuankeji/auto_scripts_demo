{# 写逻辑模板 #}
{% if registers %}
    {% for i in range(num_write_ports) %}
        {% for reg in registers %}
        {# 根据寄存器类型生成不同的写逻辑 #}
        {% if reg.type == 'ReadOnly' or reg.type == 'Null' %}
        // {{ reg.name }} 是{{ '只读' if reg.type == 'ReadOnly' else 'Null类型' }}寄存器，忽略写操作
        {% elif reg.type == 'WriteOnly' %}
        // {{ reg.name }} 是WriteOnly类型寄存器
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'WriteOnce' or reg.type == 'WriteOnlyOnce' %}
        // {{ reg.name }} 是{{ reg.type }}类型寄存器，只写一次
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }} && !{{ reg.name|lower }}_written) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= wr_data_{{ i }};
            {% endif %}
            {{ reg.name|lower }}_written <= 1'b1; // 设置写标志
        end
        {% elif reg.type == 'Write1Clean' %}
        // {{ reg.name }} 是Write1Clean类型寄存器，写1清零对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] & ~wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & ~wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write1Set' %}
        // {{ reg.name }} 是Write1Set类型寄存器，写1置位对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] | wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write0Clean' %}
        // {{ reg.name }} 是Write0Clean类型寄存器，写0清零对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] & wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write0Set' %}
        // {{ reg.name }} 是Write0Set类型寄存器，写0置位对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] | ~wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | ~wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write1Toggle' %}
        // {{ reg.name }} 是Write1Toggle类型寄存器，写1翻转对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] ^ wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg ^ wr_data_{{ i }};
            {% endif %}
        end
        {% elif reg.type == 'Write0Toggle' %}
        // {{ reg.name }} 是Write0Toggle类型寄存器，写0翻转对应位
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] ^ ~wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg ^ ~wr_data_{{ i }};
            {% endif %}
        end
        {% else %}
        // {{ reg.name }} 是{{ reg.type }}类型寄存器
        if (wr_en_{{ i }} && wr_addr_{{ i }} == ADDR_{{ reg.name|upper }}) begin
            {% if byte_enable %}
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) {{ reg.name|lower }}_reg[{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
            {% else %}
            {{ reg.name|lower }}_reg <= wr_data_{{ i }};
            {% endif %}
        end
        {% endif %}
        {% endfor %}
    {% endfor %}

        // 读操作触发的特殊逻辑
    {% for reg in registers %}
        {% if reg.type in ['ReadClean', 'WriteReadClean'] %}
        // 如果读端口读取了{{ reg.name }}，则清零（{{ reg.type }}类型）
        if ({% for i in range(num_read_ports) %}{{ 'rd_addr_%d == ADDR_%s'|format(i, reg.name|upper) }}{{ ' || ' if not loop.last }}{% endfor %}) begin
            {% for i in range(num_read_ports) %}
            if (rd_addr_{{ i }} == ADDR_{{ reg.name|upper }}) 
                {{ reg.name|lower }}_reg <= {{ reg.width|default(data_width) }}'d0;
            {% endfor %}
        end
        {% elif reg.type in ['ReadSet', 'WriteReadSet'] %}
        // 如果读端口读取了{{ reg.name }}，则置位（{{ reg.type }}类型）
        if ({% for i in range(num_read_ports) %}{{ 'rd_addr_%d == ADDR_%s'|format(i, reg.name|upper) }}{{ ' || ' if not loop.last }}{% endfor %}) begin
            {% for i in range(num_read_ports) %}
            if (rd_addr_{{ i }} == ADDR_{{ reg.name|upper }}) 
                {{ reg.name|lower }}_reg <= {{ reg.width|default(data_width) }}'hFFFFFFFF;
            {% endfor %}
        end
        {% endif %}
    {% endfor %}
{% else %}
    {% for i in range(num_write_ports) %}
        {% if byte_enable %}
        if (wr_en_{{ i }}) begin
            {% for byte in range(data_width//8) %}
            if (wr_be_{{ i }}[{{ byte }}]) reg_array[wr_addr_{{ i }}][{{ byte*8+7 }}:{{ byte*8 }}] <= wr_data_{{ i }}[{{ byte*8+7 }}:{{ byte*8 }}];
            {% endfor %}
        end
        {% else %}
        if (wr_en_{{ i }}) begin
            reg_array[wr_addr_{{ i }}] <= wr_data_{{ i }};
        end
        {% endif %}
    {% endfor %}
{% endif %}
end 