#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AutoRegFile 模板管理工具

用于管理和创建自定义模板
"""

import os
import sys
import argparse

# 添加项目根目录到 Python 路径
script_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.dirname(script_dir)
sys.path.insert(0, project_dir)

from autoregfile.core.template_manager import get_template_manager


def list_templates(category=None):
    """
    列出可用的模板
    
    参数:
        category: 模板类别
    """
    template_manager = get_template_manager()
    templates = template_manager.list_available_templates(category)
    
    print("可用的模板:")
    for cat, tmpl_list in templates.items():
        print(f"\n== {cat} ==")
        for tmpl in tmpl_list:
            source = tmpl['source']
            name = tmpl['name']
            path = tmpl['path']
            print(f"  {name}  [{source}]")
            print(f"    路径: {path}")


def copy_template(template_path, target_dir=None):
    """
    复制模板到用户目录
    
    参数:
        template_path: 模板路径
        target_dir: 目标目录
    """
    try:
        template_manager = get_template_manager()
        target = template_manager.copy_template(template_path, target_dir)
        print(f"模板已复制到: {target}")
        return True
    except Exception as e:
        print(f"错误: {str(e)}")
        return False


def create_template_dir(target_dir=None):
    """
    创建模板目录
    
    参数:
        target_dir: 目标目录
    """
    try:
        template_manager = get_template_manager()
        target = template_manager.create_user_template_dir(target_dir)
        print(f"模板目录已创建: {target}")
        return True
    except Exception as e:
        print(f"错误: {str(e)}")
        return False


def create_bus_template(name, output_dir=None):
    """
    创建新的总线模板
    
    参数:
        name: 模板名称
        output_dir: 输出目录
    """
    if output_dir is None:
        # 使用默认用户模板目录
        user_home = os.path.expanduser("~")
        output_dir = os.path.join(user_home, ".autoregfile", "templates")
    
    # 确保目录存在
    os.makedirs(output_dir, exist_ok=True)
    os.makedirs(os.path.join(output_dir, "verilog", "bus"), exist_ok=True)
    
    # 模板文件路径
    template_file = os.path.join(output_dir, "verilog", "bus", f"{name}.v.j2")
    
    # 检查文件是否已存在
    if os.path.exists(template_file):
        print(f"错误: 模板文件 {template_file} 已存在")
        return False
    
    # 创建基本模板文件
    template_content = """// ----------------------------------------------------------------------------
// {{name}} 总线接口寄存器文件
// 生成日期: {{ generation_time }}
// 模块名称: {{ module_name }}
// ----------------------------------------------------------------------------

`timescale 1ns / 1ps

module {{ module_name }} #(
    // 参数定义
    parameter ADDR_WIDTH = {{ addr_width }},              // 地址宽度
    parameter DATA_WIDTH = {{ data_width }}               // 数据宽度
) (
    // 系统信号
    input  wire                      clk,                 // 时钟信号
    input  wire                      rst_n,               // 异步复位，低电平有效
    
    // {{name}} 总线接口信号
    // 在此添加自定义总线信号
    input  wire [ADDR_WIDTH-1:0]     addr,                // 地址
    input  wire                      wr_en,               // 写使能
    input  wire                      rd_en,               // 读使能
    input  wire [DATA_WIDTH-1:0]     wdata,               // 写数据
    output wire [DATA_WIDTH-1:0]     rdata,               // 读数据
    output wire                      data_valid,          // 数据有效
    output wire                      error,               // 错误标志
    
    {% if register_outputs %}
    // 寄存器信号
    {% for output in register_outputs %}
    {{ output.direction }} {% if output.width > 1 %}[{{ output.width-1 }}:0]{% endif %} {{ output.name }}{% if not loop.last %},{% endif %}
    {% endfor %}
    {% endif %}
);

    // 内部信号定义
    reg [DATA_WIDTH-1:0]      rdata_reg;                  // 读数据寄存器
    reg                       data_valid_reg;             // 数据有效寄存器
    reg                       error_reg;                  // 错误寄存器
    
    // 脉冲寄存器相关信号
    {% for reg in registers %}
    {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
    reg [DATA_WIDTH-1:0]      {{ reg.name|lower }}_pulse_reg;      // {{ reg.description }} 脉冲寄存器
    {% endif %}
    {% endfor %}
    
    // 寄存器信号定义
    {% for reg in registers %}
    reg [DATA_WIDTH-1:0]      {{ reg.name|lower }}_reg;     // {{ reg.description }}
    {% if 'locked_by' in reg %}
    wire                      {{ reg.name|lower }}_locked;  // {{ reg.name }} 锁定信号
    {% endif %}
    {% endfor %}
    
    // 输出信号连接
    assign rdata = rdata_reg;
    assign data_valid = data_valid_reg;
    assign error = error_reg;
    
    // 字段输出信号连接
    {% for reg in registers %}
    {% for field in reg.fields|default([]) %}
    {% if field.output %}
    assign {{ field.output }} = {{ reg.name|lower }}_reg[{{ field.bits }}];
    {% endif %}
    {% endfor %}
    {% endfor %}
    
    // 脉冲输出信号连接
    {% for reg in registers %}
    {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
    assign {{ reg.name|lower }}_pulse = {{ reg.name|lower }}_pulse_reg;
    {% endif %}
    {% endfor %}
    
    // 寄存器锁定逻辑
    {% for reg in registers %}
    {% if 'locked_by' in reg %}
    assign {{ reg.name|lower }}_locked = 
    {% for lock_reg in reg.locked_by %}
    {% if 'lock_condition' in reg %}
    {{ lock_reg|lower }}_reg[{{ reg.lock_condition }}]{% if not loop.last %} || {% endif %}
    {% else %}
    {{ lock_reg|lower }}_reg[0]{% if not loop.last %} || {% endif %}
    {% endif %}
    {% endfor %};
    {% endif %}
    {% endfor %}
    
    // 主控制逻辑
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            rdata_reg <= {DATA_WIDTH{1'b0}};
            data_valid_reg <= 1'b0;
            error_reg <= 1'b0;
            
            // 寄存器复位值初始化
            {% for reg in registers %}
            {{ reg.name|lower }}_reg <= {{ reg.reset_value }};
            {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
            {{ reg.name|lower }}_pulse_reg <= {DATA_WIDTH{1'b0}};
            {% endif %}
            {% endfor %}
        end else begin
            // 默认值
            data_valid_reg <= 1'b0;
            error_reg <= 1'b0;
            
            // 清除脉冲寄存器 - 脉冲只持续一个时钟周期
            {% for reg in registers %}
            {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
            {{ reg.name|lower }}_pulse_reg <= {DATA_WIDTH{1'b0}};
            {% endif %}
            {% endfor %}
            
            // 读操作处理
            if (rd_en) begin
                data_valid_reg <= 1'b1;
                
                case (addr)
                    {% for reg in registers %}
                    'h{{ reg.address|replace('0x', '') }}: begin
                        rdata_reg <= {{ reg.name|lower }}_reg;
                    end
                    {% endfor %}
                    
                    default: begin
                        // 读取不存在的寄存器地址
                        rdata_reg <= {DATA_WIDTH{1'b0}};
                        error_reg <= 1'b1;
                    end
                endcase
                
                // 处理ReadClear类型寄存器
                {% for reg in registers %}
                {% if reg.type == 'ReadClear' %}
                if (addr == 'h{{ reg.address|replace('0x', '') }}) begin
                    {{ reg.name|lower }}_reg <= {DATA_WIDTH{1'b0}};
                end
                {% endif %}
                {% endfor %}
            end
            
            // 写操作处理
            if (wr_en) begin
                case (addr)
                    {% for reg in registers %}
                    'h{{ reg.address|replace('0x', '') }}: begin
                        {% if reg.type != 'ReadOnly' %}
                        {% if 'locked_by' in reg %}
                        if (!{{ reg.name|lower }}_locked) begin
                        {% endif %}
                            {% if reg.type in ['Write1Pulse', 'Write0Pulse'] %}
                            // 脉冲寄存器特殊处理
                            {% if reg.type == 'Write1Pulse' %}
                            // Write1Pulse类型 - 写1产生脉冲
                            {{ reg.name|lower }}_pulse_reg <= wdata & {{ '{DATA_WIDTH{1\'b1}}' }};
                            {% else %}
                            // Write0Pulse类型 - 写0产生脉冲
                            {{ reg.name|lower }}_pulse_reg <= ~wdata & {{ '{DATA_WIDTH{1\'b1}}' }};
                            {% endif %}
                            {% elif reg.type == 'Write1Clear' %}
                            // Write1Clear类型 - 写1清零对应位
                            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & ~wdata;
                            {% elif reg.type == 'Write0Clear' %}
                            // Write0Clear类型 - 写0清零对应位
                            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg & wdata;
                            {% elif reg.type == 'Write1Set' %}
                            // Write1Set类型 - 写1置位对应位
                            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | wdata;
                            {% elif reg.type == 'Write0Set' %}
                            // Write0Set类型 - 写0置位对应位
                            {{ reg.name|lower }}_reg <= {{ reg.name|lower }}_reg | ~wdata;
                            {% else %}
                            // 普通寄存器写入
                            {{ reg.name|lower }}_reg <= wdata;
                            {% endif %}
                        {% if 'locked_by' in reg %}
                        end else begin
                            // 寄存器已锁定，忽略写入
                            error_reg <= 1'b1;
                        end
                        {% endif %}
                        {% else %}
                        // 尝试写只读寄存器
                        error_reg <= 1'b1;
                        {% endif %}
                    end
                    {% endfor %}
                    
                    default: begin
                        // 写入不存在的寄存器地址
                        error_reg <= 1'b1;
                    end
                endcase
            end
            
            // 外部信号输入寄存器处理
            {% for reg in registers %}
            {% if reg.type == 'ReadOnly' %}
            {% for field in reg.fields|default([]) %}
            {% if field.input %}
            {{ reg.name|lower }}_reg[{{ field.bits }}] <= {{ field.input }};
            {% endif %}
            {% endfor %}
            {% endif %}
            {% endfor %}
            
            {% if timeout_enable %}
            // 超时处理逻辑
            // ... 在此添加超时处理代码 ...
            {% endif %}
            
            {% if read_delay or write_delay or response_delay %}
            // 延迟处理逻辑
            // ... 在此添加延迟处理代码 ...
            {% endif %}
        end
    end

endmodule
"""
    
    # 写入模板文件
    with open(template_file, "w") as f:
        f.write(template_content)
    
    print(f"总线模板已创建: {template_file}")
    return True


def main():
    """主函数"""
    parser = argparse.ArgumentParser(description='AutoRegFile 模板管理工具')
    
    # 命令选项
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--list', action='store_true', help='列出所有可用的模板')
    group.add_argument('--list-bus', action='store_true', help='列出所有可用的总线模板')
    group.add_argument('--copy', help='复制模板到用户目录')
    group.add_argument('--create-dir', action='store_true', help='创建用户模板目录')
    group.add_argument('--create-bus', help='创建新的总线模板')
    
    # 其他选项
    parser.add_argument('--target-dir', help='目标目录')
    
    args = parser.parse_args()
    
    # 执行命令
    if args.list:
        list_templates()
        return 0
    elif args.list_bus:
        list_templates('verilog/bus')
        return 0
    elif args.copy:
        if copy_template(args.copy, args.target_dir):
            return 0
        else:
            return 1
    elif args.create_dir:
        if create_template_dir(args.target_dir):
            return 0
        else:
            return 1
    elif args.create_bus:
        if create_bus_template(args.create_bus, args.target_dir):
            return 0
        else:
            return 1
    
    return 0


if __name__ == '__main__':
    sys.exit(main()) 